const app = require("../app");
const debug = require("debug")("auth:server");
const http = require("http");
const Redis = require("ioredis");
const mongoose = require("mongoose");
const { logger } = require("../utils/logger");

const redis = new Redis();
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
redis.on("ready", async () => {
  logger.log("info", "Connected to Redis");
  logger.log("info", process.env.MONGO_URL);
  await mongoose.connect(process.env.MONGO_URL);
  logger.log("info", "Connection to database successful!");
  logger.log("info", `Serving on ${port}`);
  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
});

redis.on("error", (error) => {
  logger.error("Error connecting to Redis:", error);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
